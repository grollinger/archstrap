#!/bin/bash
# shellcheck disable=SC2016
# archstrap
# A stupid simple script to bootstrap Arch Linux from other Linux distributions 
# Depends:
# curl
# gpg
# tar
# zstd
# mount
# mountpoint
# mv
# cp
# Reference:
# https://wiki.archlinux.org/title/Install_Arch_Linux_from_existing_Linux_

LC_ALL=C
tmpDir="${TMPDIR:-${XDG_RUNTIME_DIR:-/tmp}}"
: "${1%/}"; mountpoint="${_:-$tmpDir}"
rootFs="$mountpoint/${2:-archrootfs}"
mirror='https://geo.mirror.pkgbuild.com'
tarBall='archlinux-bootstrap-x86_64.tar.zst'

cleanup() {
    umount -R "$rootFs"
    
    exit "${1:-1}"
}

arch_chroot() {
    mount --bind "$1" "$1"

    "$1/bin/arch-chroot" "$@"
}

newroot_setup() {
    cp -a "chroot.sh" "$1/"
    cp bash.bashrc "$1/etc"
    : /usr/share; [[ -d "$_/terminfo" ]]&& cp -r "$_/terminfo" "$1$_/"

    arch_chroot "$1"
}

bootstrap_ext() (
    cd "$tmpDir"|| return

    curl -O "$mirror/iso/latest/$1{,.sig}"

    gpg --keyserver-options auto-key-retrieve --verify "$1.sig"

    tar -xf "$1" --numeric-owner

    [[ -d $rootFs ]]&& rm -r "$rootFs"
    mv "$mountpoint/root.x86_64" "$rootFs"
)

trap cleanup EXIT INT

(( EUID ))&& { printf 'Must be executed as superuser\n'; exit 1; }
[[ -d $mountpoint ]]|| { printf 'Mountpoint %s does not exist\n' "$mountpoint"; exit 1; }
[[ -d $rootFs ]]&& { arch_chroot "$rootFs"; exit; }

bootstrap_ext "$tarBall"

shift 2
newroot_setup "$rootFs" chroot.sh "$@"